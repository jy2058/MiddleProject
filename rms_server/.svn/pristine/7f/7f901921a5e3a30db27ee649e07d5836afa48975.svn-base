<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
			PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
			"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<!-- namespace속성 : 아래에서 작성한 SQL을 호출할 때 같이 사용된다. -->			
<sqlMap namespace="notice">
	<!-- getSearchNotice
		이 영역에 sql문에 맞는 태그를 사용하여 SQL문을 기술한다.
		
		사용할 수 있는 기본적인 태그들
		<select> ~~~ </select>
		<insert> ~~~ </insert>
		<update> ~~~ </update>
		<delete> ~~~ </delete>
	 -->
	 
	 <!-- 
	 	위 태그에서 사용되는 속성들
	 		1) id속성 : 해당 태그를 호출할 때 <sqlMap>태그의 namespace와
	 							  연결하여 사용하는 이름
	 		2) parameterClass속성 : sql문에 사용될 데이터가 들어있는 객체를
	 							  지정한다. 
	 							  (보통 VO클래스, 자바의 자료형이름 등이 사용된다.)
	 							  (typeAlia로 지정한 alias명을 사용할 수 있다.)							  
			3) resultClass속성 : select문을 실행한 결과를 담을 객체를 지정한다.
									(보통 VO클래스나 자바의 자료형이름을 사용한다.)							 
	 -->
	 
	 <!-- insert 연습 -->
	 <insert id="insertNotice" parameterClass="NoticeVO">
	 		insert into notice (notice_num,title,content,admin_id,write_date)
	 		values (notice_seq.nextval, #title#,#content#, #admin_id#,sysdate)
	 </insert>
	 
	 <!-- update 연습 (parameterClass에 alias를 지정할 수 있다.) -->
	 <update id="updateNotice" parameterClass="NoticeVO">
	 		update notice set title=#title#,
	 						  content=#content#,
	 						  write_date=sysdate
	 		where notice_num=#notice_num#
	 </update>
	 
	 <!-- 
	 		parameterClass에 설정되는 값이 단일값(즉 1개의 데이터)이면
	 		SQL문에 이 값을 나타내는 변수는 특별히 이름이 정해지지 않았다.
	 		(즉, 사용자가 임의로 지정할 수 있다.)
	 -->
	 <!-- delete 연습 -->
	 <delete id="deleteNotice" parameterClass="NoticeVO">
<!-- 	 		delete from mymember where mem_id=#mem_id# -->
			delete from notice where notice_num=#notice_num# 
	 </delete>
	 
	 <!-- select 연습 -->
	 <select id="getNoticeAll" resultClass="NoticeVO">
	 		select notice_num,title,content,admin_id,write_date from notice
	 </select>
	 
	 <select id="getNotice" resultClass="int" parameterClass="String">
	 		select count(*) from notice where notice_num=#notice_num#
	 </select>
	 		
	 <select id="getSearchNotice" parameterClass="NoticeVO" resultClass="NoticeVO">
	 		select notice_num,title,content,admin_id,write_date from notice
	 		<dynamic prepend="where">
		 		<isNotEmpty property="notice_num" prepend="and">
					notice_num = #notice_num#
				</isNotEmpty>
					<isNotEmpty property="title" prepend="and">
	 				title = #title#
	 			</isNotEmpty>
	 			<isNotEmpty property="content" prepend="and">
					content = #content#
				</isNotEmpty>
		 		<isNotEmpty property="admin_id" prepend="and">
	 				admin_id = #admin_id#
	 			</isNotEmpty>
	 			<isNotEmpty property="write_date" prepend="and">
					write_date = #write_date#
				</isNotEmpty>
	 		</dynamic>
	 		
	 		<!-- select * from mymember where 1=1
	 			<isNotEmpty property="mem_id">
					and mem_id = #mem_id#
				</isNotEmpty>
				<isNotEmpty property="mem_name">
	 				and mem_name = #mem_name#
	 			</isNotEmpty>
 				<isNotEmpty property="mem_tel">
	 				and mem_tel = #mem_tel#
	 			</isNotEmpty>
 				<isNotEmpty property="mem_addr">
	 				and mem_addr like '%' || #mem_addr# || '%'
	 			</isNotEmpty>
	 			 -->
	 </select>
	 
	 <select id="getNoticeTextSearch" resultClass="NoticeVO" parameterClass="NoticeVO">
	 		select notice_num, title, content, admin_id, write_date from notice
	 		<dynamic prepend="where">
	 		
	 			<isNotEmpty property="notice_num" prepend="or">
					notice_num like '%' || #notice_num# || '%'
				</isNotEmpty>
	 		
		 		<isNotEmpty property="title" prepend="or">
					title like '%' || #title# || '%'
				</isNotEmpty>
				
				<isNotEmpty property="content" prepend="or">
	 				content like '%' || #content# || '%'
	 			</isNotEmpty>
	 			
                <isNotEmpty property="admin_id" prepend="or">
	 				admin_id like '%' || #admin_id# || '%'
	 			</isNotEmpty>
	 			
                <isNotEmpty property="write_date" prepend="or">
	 				write_date like '%' || #write_date# || '%'
	 			</isNotEmpty>
			</dynamic>
	 </select>

</sqlMap>			





